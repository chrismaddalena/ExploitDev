#!/usr/bin/python
import ctypes

# Insert shellcode to be tested here
# Shellcode must be \x formatted
# Uncomment the \xcc to enable analysis in a debugger
shellcode = bytearray(
# "\xcc"

)

# Print the total length of the shellcode
print "Total Length: ",len(shellcode)

# Pause just before shellcode execution and wait for key press
# Attach the debugger to Python now!
debug = raw_input("Debug pause!")

ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
                                          ctypes.c_int(len(shellcode)),
                                          ctypes.c_int(0x3000),
                                          ctypes.c_int(0x40))

buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)

ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),
                                     buf,
                                     ctypes.c_int(len(shellcode)))

ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),
                                         ctypes.c_int(0),
                                         ctypes.c_int(ptr),
                                         ctypes.c_int(0),
                                         ctypes.c_int(0),
                                         ctypes.pointer(ctypes.c_int(0)))

try:
    ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),ctypes.c_int(-1))
except Exception as err:
    print(err)
